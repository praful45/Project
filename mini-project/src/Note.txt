React cheat sheet link - https://www-freecodecamp-org.cdn.ampproject.org/c/s/www.freecodecamp.org/news/the-react-cheatsheet/amp/

Module 7 - about the debugging, errors, react developer tools extension
Module 8 - about solo proj... validations
Module 9 - React fragments <> </>
            React Portals
            Wrappers
            refs => useRef() hook. controlled vs uncotrolled

Moudule 10 - Effect hook    
                useEffect(()=>{...},[dependencies])
            Starting Setup
                LoginProj
                    -Home
                    -Login
                    -LoginRoot
                    -MainHeader
    UseReducer - const [state,dispatch] = UseReducer(reducerFn,initialState, initFn)
    useContext - Theory part - const value = useContext(MyContext);
                    creating context and using context

React Hooks Lists:
-useState
-useEffect
-useRef
-useCallback
-useMemo
-useContext
-useReducer

Rules of Hooks
* Only call React Hooks in React Functions
    - React Component Functions
    - Custom Hooks
* Only call React Hooks at the Top Level
    - Don't call them in nested Functions
    - Don't call them in any block statements

for useEffect() => always add everything you refer to inside of useEffect() as a dependency

useRef()
If we tried to count how many times our application renders using the useState Hook, we would be caught in an infinite loop since this Hook itself causes a re-render.
To avoid this, we can use the useRef Hook.